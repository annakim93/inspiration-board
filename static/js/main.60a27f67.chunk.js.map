{"version":3,"sources":["components/Card.js","components/NewCardForm.js","components/Board.js","App.js","registerServiceWorker.js","index.js"],"names":["CARD_COLORS","Card","props","cardColor","Math","floor","random","length","className","onClick","deleteCardCallback","id","optionalText","optionalEmoji","emoji","getUnicode","EMOJI_LIST","NewCardForm","useState","text","formFields","setFormFields","currentBoard","targetBoard","setTargetBoard","useEffect","onInputChange","event","newFormFields","target","name","value","onSubmit","preventDefault","addCardCallback","onChange","placeholder","disabled","selected","map","index","htmlFor","studentBoards","studentBoard","type","Board","BOARD_API_URL_BASE","url","CARDS_API_URL_BASE","cardList","setCardList","setStudentBoards","alert","setAlert","boardName","setCurrentBoard","axios","get","then","response","data","board","catch","error","message","apiCardList","card","deleteCard","newCardList","filter","delete","newCard","post","cards","currentCardList","push","generateCardComponents","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","status","headers","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.60a27f67.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport emoji from 'emoji-dictionary';\n\nimport './Card.css';\n\nconst CARD_COLORS = [\n  'bg-color-yellow',\n  'bg-color-pink',\n  'bg-color-orange'\n];\n\nconst Card = props => {\n  const cardColor = CARD_COLORS[Math.floor(Math.random() * CARD_COLORS.length)];\n\n  return (\n    <div className={`card ${cardColor}`}>\n      <button className=\"delete-button\" onClick={ () => props.deleteCardCallback(props.id) }>\n        X\n      </button>\n      <div className={`card__content ${cardColor}`}>\n        <p className={`card__content-text ${cardColor}`}>\n          { props.optionalText ? props.optionalText : null }\n        </p>\n        <p className={`card__content-emoji ${cardColor}`}>\n          { props.optionalEmoji ? emoji.getUnicode(props.optionalEmoji) : null }\n        </p>\n      </div>\n    </div>\n  )\n}\n\nCard.propTypes = {\n  id: PropTypes.number.isRequired,\n  optionalText: PropTypes.string,\n  optionalEmoji: PropTypes.string,\n  deleteCardCallback: PropTypes.func.isRequired\n};\n\nexport default Card;\n","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\n// import emoji from 'emoji-dictionary';\nimport './NewCardForm.css';\nimport './Card.css';\n\n// Using smaller list of emojis b/c full list using emoji.names does not allow for successful post request\nconst EMOJI_LIST = [\n  \"\", \n  \"heart_eyes\", \n  \"beer\", \n  \"clap\", \n  \"sparkling_heart\", \n  \"heart_eyes_cat\", \n  \"dog\"\n]\n\nconst NewCardForm = props => {\n  const [formFields, setFormFields] = useState({\n    text: '',\n    emoji: ''\n  });\n  \n  const [targetBoard, setTargetBoard] = useState(props.currentBoard);\n\n  useEffect(() => {\n    setTargetBoard(props.currentBoard)\n  }, [props]);\n\n  const onInputChange = event => {\n    const newFormFields = { ...formFields }\n    newFormFields[event.target.name] = event.target.value;\n    setFormFields(newFormFields);\n  };\n\n  const onTargetBoardChange = event => {\n    setTargetBoard(event.target.value);\n  };\n\n  const onFormSubmit = event => {\n    event.preventDefault();\n    props.addCardCallback(formFields, targetBoard);\n    setFormFields({\n      text: '',\n      emoji: ''\n    });\n    setTargetBoard(props.currentBoard);\n  };\n\n  return (\n    <div>\n      <span>Add a msg using the sticky below!</span>\n      <div className='new-card-form new-card-form__bg-color'>\n        <div className='card__content'>\n          <form onSubmit={onFormSubmit} className='new-card-form__bg-color'>\n            <textarea name='text' onChange={onInputChange} value={formFields.text} placeholder='Write your message here' />\n            \n            <select name='emoji' onChange={onInputChange} value={formFields.emoji}>\n              <option value='' disabled selected>Emoji Selection</option>\n              { EMOJI_LIST.map((emoji, index) => <option key={index}>{emoji}</option>) }\n              {/* { emoji.names.map((emoji, index) => <option key={index}>{emoji}</option>) } */}\n            </select>\n\n            <label htmlFor='boards' className='new-card-form__bg-color'>Destination board:</label>\n            <select name='boards' onChange={onTargetBoardChange} value={targetBoard}>\n              <option value='' disabled selected>{ targetBoard }</option>\n              { props.studentBoards.map((studentBoard, index) => <option key={index}>{studentBoard}</option>) }\n            </select>\n\n            <input type='submit' value='Add Inspo!' className='new-card-form__form-button' />\n          </form>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nNewCardForm.propTypes = {\n  addCardCallback: PropTypes.func.isRequired,\n  currentBoard: PropTypes.string.isRequired,\n  studentBoards: PropTypes.array.isRequired\n};\n\nexport default NewCardForm;","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport axios from 'axios';\n\nimport './Board.css';\nimport Card from './Card';\nimport NewCardForm from './NewCardForm';\n// import CARD_DATA from '../data/card-data.json';\n\n\nconst Board = props => {\n  const BOARD_API_URL_BASE = props.url + 'boards/';\n  const CARDS_API_URL_BASE = props.url + 'cards/';\n  \n  const [cardList, setCardList] = useState([]);\n  const [studentBoards, setStudentBoards] = useState([]);\n  const [alert, setAlert] = useState(null);\n  const [currentBoard, setCurrentBoard] = useState(props.boardName);\n\n  useEffect(() => {\n    axios.get(BOARD_API_URL_BASE)\n      .then((response) => {\n        setStudentBoards(response.data.map(board => board.board.name));\n      })\n      .catch((error) => {\n        setAlert(error.message);\n      })\n  }, []);\n\n  useEffect(() => {\n    axios.get(BOARD_API_URL_BASE + currentBoard + '/cards')\n      .then((response) => {\n        const apiCardList = response.data.map(card => card.card);\n        setCardList(apiCardList);\n        setAlert(null);\n      })\n      .catch((error) => {\n        setAlert(error.message);\n      })\n  }, [currentBoard]);\n\n  const deleteCard = id => {\n    const newCardList = cardList.filter((card) => {\n      return card.id !== id;\n    });\n\n    if (newCardList.length < cardList.length) {\n      axios.delete(CARDS_API_URL_BASE + id)\n        .then((response) => {\n          setAlert(`Card #${id} successfully deleted from ${ currentBoard }'s board.`);\n          setCardList(newCardList);\n        })\n        .catch((error) => {\n          setAlert(`Failed to delete card #${id}.`);\n        })\n    }\n  };\n\n  const addCard = (newCard, targetBoard) => {\n    axios.post(BOARD_API_URL_BASE + targetBoard + '/cards', newCard)\n      .then((response) => {\n        if (targetBoard === currentBoard) {\n          const newCardList = [...cardList, response.data.card];\n          setCardList(newCardList);\n        }\n        setAlert(`Successfully added new inspo card to ${ targetBoard }'s board!`);\n      })\n      .catch((error) => {\n        setAlert(error.message);\n      })\n  };\n\n  const generateCardComponents = cards => {\n    const currentCardList = [];\n  \n    for (let card of cards) {\n      currentCardList.push(\n        <Card \n          key={card.id}  \n          id={card.id} \n          optionalText={card.text} \n          optionalEmoji={card.emoji} \n          deleteCardCallback={deleteCard}\n        />\n      )\n    }\n  \n    return currentCardList;\n  };\n\n  const onInputChange = event => {\n    setCurrentBoard(event.target.value);\n  };\n\n  return (\n    <div className='board-container'>\n      <div className='board-container__nav'>\n        <span>Current board:</span>\n        <select name='studentBoard' onChange={onInputChange}>\n          <option value='' disabled selected>{ currentBoard }</option>\n          { studentBoards.map((boardName, index) => <option key={index}>{ boardName }</option>) }\n        </select>\n      </div>\n      <div className='board-container__left-side'>\n        <h1 className=\"header__h1\">\n          <span>inspo </span>\n          <span className='header__text--stroke'>board</span>\n        </h1>\n        { alert \n          ? <div className='alert-display'>\n            <span>{ alert }</span>\n          </div> \n          : ''\n        }\n        <NewCardForm addCardCallback={addCard} currentBoard={currentBoard} studentBoards={studentBoards} />\n      </div>\n      <div className='board-container__content'>\n        <div className=\"board-container__content__cards\">\n          { generateCardComponents(cardList) }\n        </div>\n      </div>\n    </div>\n  )\n};\n\nBoard.propTypes = {\n  url: PropTypes.string.isRequired,\n  boardName: PropTypes.string.isRequired\n};\n\nexport default Board;\n","import React from 'react';\nimport './App.css';\nimport Board from './components/Board';\n\nconst App = () => {\n  return (\n    <section>\n      <Board\n        url=\"https://inspiration-board.herokuapp.com/\"\n        boardName='anna-kim'\n      />\n    </section>\n  );\n};\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}